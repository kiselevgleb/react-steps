{"version":3,"sources":["StepModel.js","Steps-inp.jsx","Steps-out.jsx","App.js","serviceWorker.js","index.js"],"names":["StepModel","id","date","distans","this","StepsInp","props","handleAdd","onAdd","inpDate","useRef","inpDis","className","onSubmit","evt","preventDefault","step","nanoid","target","value","dis","htmlFor","type","name","ref","StepsOut","steps","handleRemove","onRemove","handleEdit","onEdit","console","log","map","o","key","onClick","App","useState","setSteps","inpDateVal","setDate","inpDisVal","setDis","sort","a","b","Date","s","newStep","boo","forEach","e","newDis","parseInt","filter","prevSteps","current","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2OAQeA,EAPb,WAAYC,EAAIC,EAAMC,GAAU,oBAC9BC,KAAKH,GAAKA,EACVG,KAAKF,KAAOA,EACZE,KAAKD,QAAUA,G,OCuBJE,MAvBf,SAAkBC,GAAQ,IACTC,EAAaD,EAApBE,MACFC,EAAUC,mBACVC,EAASD,mBAUf,OACE,0BAAME,UAAU,OAAOC,SATJ,SAAAC,GACnBA,EAAIC,iBACJ,IAAMC,EAAO,IAAIhB,EAAUiB,cAAUH,EAAII,OAAOhB,KAAKiB,MAAOL,EAAII,OAAOE,IAAID,OAC3EZ,EAAU,CAACS,OAAMP,UAASE,WAC1BG,EAAII,OAAOhB,KAAKiB,MAAM,GACtBL,EAAII,OAAOE,IAAID,MAAM,KAKnB,2BAAOP,UAAU,QAAQS,QAAQ,QAAjC,QACA,2BAAOT,UAAU,MAAMU,KAAK,OAAOrB,GAAG,OAAOsB,KAAK,OAAOC,IAAKf,IAC9D,2BAAOG,UAAU,QAAQS,QAAQ,OAAjC,WACA,2BAAOT,UAAU,MAAMW,KAAK,MAAMC,IAAKb,IACvC,wCCESc,MAvBf,SAAkBnB,GAAQ,IAChBoB,EAAsDpB,EAAtDoB,MAAiBC,EAAqCrB,EAA/CsB,SAAgCC,EAAevB,EAAvBwB,OAEvC,OADAC,QAAQC,IAAIN,GAEV,2BAAOd,UAAU,OACf,4BACE,oCACA,uCACA,uCAEDc,EAAMO,KAAI,SAAAC,GAAC,OACV,wBAAIC,IAAKD,EAAEjC,IACT,4BAAKiC,EAAEhC,MACP,4BAAKgC,EAAE/B,SACP,4BACE,4BAAQiC,QAAS,kBAAMP,EAAWK,EAAEjC,MAApC,QACA,4BAAQmC,QAAS,kBAAMT,EAAaO,EAAEjC,MAAtC,cC2CGoC,MAtDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNZ,EADM,KACCa,EADD,OAEiBD,mBAAS,IAF1B,mBAENE,EAFM,KAEMC,EAFN,OAGeH,mBAAS,IAHxB,mBAGNI,EAHM,KAGKC,EAHL,KA8Cb,OA3BajB,EAAMkB,MAAK,SAACC,EAAGC,GAC1B,OAAO,IAAIC,KAAKD,EAAE5C,MAAQ,IAAI6C,KAAKF,EAAE3C,SA2BrC,yBAAKU,UAAU,OACb,kBAAC,EAAD,CAAUJ,MA1BI,SAAAwC,GAChBjB,QAAQC,IAAIgB,EAAEhC,KAAKd,MACnB6B,QAAQC,IAAIN,GACZ,IACIuB,EADAC,GAAM,EAEVxB,EAAMyB,SAAQ,SAAAC,GACZ,GAAIA,EAAElD,MAAQ8C,EAAEhC,KAAKd,KAAM,CACzB,IAAImD,EAASC,SAASF,EAAEjD,SAAWmD,SAASN,EAAEhC,KAAKb,SACnD4B,QAAQC,IAAIqB,GACZJ,EAAU,IAAIjD,EAAUiB,cAAUmC,EAAElD,KAAMmD,GAC1Cd,EAASb,EAAM6B,QAAO,SAAArB,GAAC,OAAIA,EAAEjC,KAAOmD,EAAEnD,OACtCiD,GAAM,MAGVnB,QAAQC,IAAIkB,GAEVX,EADEW,EACO,SAAAM,GAAS,4BAAQA,GAAR,CAAmBP,KAE5B,SAAAO,GAAS,4BAAQA,GAAR,CAAmBR,EAAEhC,SAEzCyB,EAAQO,EAAEvC,SACVkC,EAAOK,EAAErC,WAMP,kBAAC,EAAD,CAAUe,MAAOA,EAAOE,SA5CP,SAAA3B,GACnBsC,EAASb,EAAM6B,QAAO,SAAArB,GAAC,OAAIA,EAAEjC,KAAOA,OA2Cc6B,OAzCjC,SAAA7B,GACjB8B,QAAQC,IAAIU,GACZX,QAAQC,IAAKQ,EAAWiB,SACxBlB,GAAS,SAAAiB,GAAS,OAAIA,EAAUvB,KAAI,SAAAC,GAC9BA,EAAEjC,KAAOA,IACXyC,EAAUe,QAAQtC,MAAQe,EAAE/B,QAC5BqC,EAAWiB,QAAQtC,MAAQe,EAAEhC,YAGjCqC,EAASb,EAAM6B,QAAO,SAAArB,GAAC,OAAIA,EAAEjC,KAAOA,WCZpByD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,a","file":"static/js/main.fb7a92b1.chunk.js","sourcesContent":["class StepModel {\n  constructor(id, date, distans) {\n    this.id = id;\n    this.date = date;\n    this.distans = distans;\n  }\n}\n\nexport default StepModel;\n","import React, { useState, useRef } from 'react'\nimport StepModel from './StepModel';\nimport {nanoid} from 'nanoid';\n\nfunction StepsInp(props) {\n  const { onAdd: handleAdd} = props;\n  const inpDate = useRef();\n  const inpDis = useRef();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const step = new StepModel(nanoid(), evt.target.date.value, evt.target.dis.value);\n    handleAdd({step, inpDate, inpDis});\n    evt.target.date.value=\"\";\n    evt.target.dis.value=\"\";\n  }\n\n  return (\n    <form className=\"form\" onSubmit={handleSubmit}>\n      <label className=\"label\" htmlFor=\"date\" >Date</label>\n      <input className=\"inp\" type=\"date\" id=\"date\" name=\"date\" ref={inpDate}/>\n      <label className=\"label\" htmlFor=\"dis\" >Distans</label>\n      <input className=\"inp\" name=\"dis\" ref={inpDis}/>\n      <button>ok</button>\n    </form>);\n}\n\nexport default StepsInp;\n","import React, { useState } from 'react'\n\nfunction StepsOut(props) {\n  const { steps, onRemove: handleRemove, onEdit: handleEdit } = props;\n  console.log(steps);\n  return (\n    <table className=\"tab\">\n      <tr>\n        <th>Date</th>\n        <th>Distans</th>\n        <th>Action</th>\n      </tr>\n      {steps.map(o =>\n        <tr key={o.id}>\n          <td>{o.date}</td>\n          <td>{o.distans}</td>\n          <td>\n            <button onClick={() => handleEdit(o.id)}>edit</button>\n            <button onClick={() => handleRemove(o.id)}>del</button>\n          </td>\n        </tr>\n      )}\n    </table>);\n}\n\nexport default StepsOut;\n","import React, { useState } from 'react'\nimport './App.css';\nimport StepsInp from './Steps-inp';\nimport StepsOut from './Steps-out';\nimport StepModel from './StepModel';\nimport { nanoid } from 'nanoid';\n\nfunction App() {\n  const [steps, setSteps] = useState([]);\n  const [inpDateVal, setDate] = useState(\"\");\n  const [inpDisVal, setDis] = useState(\"\");\n\n  const handleRemove = id => {\n    setSteps(steps.filter(o => o.id !== id));\n  }\n  const handleEdit = id => {\n    console.log(inpDisVal)\n    console.log( inpDateVal.current)\n    setSteps(prevSteps => prevSteps.map(o => {\n      if (o.id === id) {\n        inpDisVal.current.value = o.distans;\n        inpDateVal.current.value = o.date;\n      }\n    }));\n    setSteps(steps.filter(o => o.id !== id));\n  }\n  const sort = steps.sort((a, b) => {\n    return new Date(b.date) - new Date(a.date);\n  });\n  const handleAdd = s => {\n    console.log(s.step.date)\n    console.log(steps)\n    let boo = false\n    let newStep;\n    steps.forEach(e => {\n      if (e.date == s.step.date) {\n        let newDis = parseInt(e.distans) + parseInt(s.step.distans);\n        console.log(newDis)\n        newStep = new StepModel(nanoid(), e.date, newDis);\n        setSteps(steps.filter(o => o.id !== e.id));\n        boo = true\n      }\n    });\n    console.log(boo)\n    if (boo) {\n      setSteps(prevSteps => [...prevSteps, newStep]);\n    } else {\n      setSteps(prevSteps => [...prevSteps, s.step]);\n    }\n    setDate(s.inpDate);\n    setDis(s.inpDis);\n  }\n\n  return (\n    <div className=\"App\">\n      <StepsInp onAdd={handleAdd} />\n      <StepsOut steps={steps} onRemove={handleRemove} onEdit={handleEdit} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}